
class RabinKarpRollingHash:
    def __init__(self, window_size, prime=11):
        self.prime = prime
        self.window_size = window_size

    def get_init_hash(self, data):
        return sum((data[i]) * (self.prime ** i) for i in range(self.window_size))

    def roll_hash(self, old_hash, old_val, new_val):
        return (old_hash - (old_val)) // self.prime + \
               (new_val) * (self.prime ** (self.window_size -1))

def test():
    r = RabinKarpRollingHash(window_size=256)

    mask = 1 << 7
    mask -= 1
    def is_hash_window(hash):
        return hash & mask == 0

    with open('/Users/yurigrigorian/Downloads/zoom.apk' ,'rb') as f:
        data = memoryview(f.read())
        curr_hash = r.get_init_hash(data[:256])
        f_run = True

        last_offset = 0
        curr_offset = 256

        while data:
            if is_hash_window(curr_hash):
                # print("FOUND WINDOW")
                # print(f"SIZE WINDOW {curr_offset - last_offset}")
                last_offset = curr_offset
                if((curr_offset % 10240) == 0):
                 print(curr_offset/1024/1024)

            old_val = data[0]

            if f_run:
                data = data[256:]
                curr_offset = 256
                f_run = False
            else:
                data = data[1:]
                curr_offset +=1

            curr_hash = r.roll_hash(curr_hash, old_val, data[0])
test()