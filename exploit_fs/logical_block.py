from sortedcontainers import SortedDict

from config import BLOCK_SIZE
from exploit_fs.base_disk import BaseDisk
from exploit_fs.logical_to_physical_block_ref import LogicalToPhysicalBlockRef
from seq import RunningSequence


class LogicalBlock(RunningSequence):
    DEFAULT_BLOCK_SIZE_BYTES = BLOCK_SIZE

    def __init__(self, physical_block_store: BaseDisk, lid: int = None, dirty=True, ref_physical_block: SortedDict = None):
        if ref_physical_block is None:
            ref_physical_block = SortedDict()

        self.physical_block_store = physical_block_store

        self._lid = self.get_new_id() if lid is None else lid
        self.update_created_bid(self._lid)

        self.__dirty = dirty
        self.__ref_physical_block: SortedDict[
            int, LogicalToPhysicalBlockRef] = ref_physical_block  # {<logical_offset_end>: LogicalToPhysicalBlockRef}

    @property
    def dirty(self):
        return self.__dirty

    @property
    def lid(self):
        return self._lid

    @property
    def block_size(self):
        return self.DEFAULT_BLOCK_SIZE_BYTES

    def hash(self):
        return hash(self.read())

    def set_logical_to_physical_refs(self, refs: SortedDict):
        self.__ref_physical_block = refs

    def get_logical_to_physical_refs(self):
        return self.__ref_physical_block

    def read(self):
        physical_block_ref: LogicalToPhysicalBlockRef

        data = b''
        for _, physical_block_ref in self.__ref_physical_block.items():
            data += self.physical_block_store.read_block_by_id(physical_block_ref.physical_block_id)[
                    physical_block_ref.physical_block_start_offset:physical_block_ref.physical_block_end_offset]

        return data

    def get_physical_block_by_offset(self, offset):
        # print(self.__ref_physical_block.items())
        for logical_offset_end, ref in self.__ref_physical_block.items():
            if offset < logical_offset_end:
                return ref

    def can_write_to_physical_blocks_directly(self):
        ref: LogicalToPhysicalBlockRef

        handled_phys_block_ids = []
        for ref in self.__ref_physical_block.values():
            if ref.physical_block_id in handled_phys_block_ids:
                continue

            phys_block = self.physical_block_store.get_block_by_id(ref.physical_block_id)
            ret = phys_block.are_ref_offsets_shared_with_other_logical_blocks(self.lid,
                                                                              self.__ref_physical_block.values())
            handled_phys_block_ids.append(ref.physical_block_id)

            if ret:
                return False

        return True

    def write(self, offset, data):
        if not self.__ref_physical_block.keys():
            raise RuntimeError("Cannot write to a logical block none physical blocks")

        d_len = len(data)

        while d_len:
            physical_block_ref: LogicalToPhysicalBlockRef = self.get_physical_block_by_offset(offset)

            if not physical_block_ref:
                raise RuntimeError(f"No physical block can support the needed offset for writing offset {offset}")

            to_write = data[:physical_block_ref.length]
            self.physical_block_store.write_block_by_id(physical_block_ref.physical_block_id,
                                                        physical_block_ref.physical_block_start_offset,
                                                        to_write)

            data = data[physical_block_ref.length:]
            offset += physical_block_ref.length
            d_len -= len(to_write)

        self.physical_block_store.write_block_by_id(self.__ref_physical_block.values()[0].physical_block_id, offset, data)

    @property
    def physical_block_ref_count(self):
        return len(self.__ref_physical_block.keys())

    def free(self):
        physical_blocks_ids_involved = []

        physical_block_ref: LogicalToPhysicalBlockRef

        for _, physical_block_ref in self.__ref_physical_block.items():
            self.physical_block_store.free_ref(physical_block_ref)
            if physical_block_ref.physical_block_id not in physical_blocks_ids_involved:
                physical_blocks_ids_involved.append(physical_block_ref.physical_block_id)

        self.__ref_physical_block = SortedDict()

        return physical_blocks_ids_involved
