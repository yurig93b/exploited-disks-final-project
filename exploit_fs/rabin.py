import collections


class RabinKarpRollingHash:
    def __init__(self, window_size, mul=389, prime=1610612741):
        self.prime = prime
        self.mul = mul
        self.window_size = window_size
        self.curr_hash_elements: collections.deque = None

    def get_init_hash(self, data):
        calc = [((data[i] * (self.mul ** i)) % self.prime) for i in reversed(range(self.window_size))]
        self.curr_hash_elements = collections.deque(calc)
        return sum(self.curr_hash_elements) % self.prime

    def roll_hash(self, old_hash, new_val):
        new_val_hash = new_val % self.prime
        ret = ((old_hash - self.curr_hash_elements.popleft()) * self.prime + new_val_hash) % self.prime
        self.curr_hash_elements.appendleft(new_val_hash)
        return ret


def test():
    r = RabinKarpRollingHash(window_size=1 * 512)

    mask = 1 << 7
    mask -= 1

    def is_hash_window(hash):
        if (hash & mask == 0):
            print(hash)
            print(hash & mask)

        return hash & mask == 0

    with open('/Users/yurigrigorian/Downloads/IMG_9561.jpg', 'rb') as f:
        data = memoryview(f.read())
        curr_hash = r.get_init_hash(data[:512])
        f_run = True

        last_offset = 0
        curr_offset = 512

        ret = []
        while data:
            # if len(ret) > 3:
            #     break
            # if (curr_offset % (1024* 10)) == 0:
            # print(curr_offset/1024/1024)
            if is_hash_window(curr_hash):
                if curr_offset - last_offset >= 32:
                    # print("FOUND WINDOW")
                    #     print(curr_hash)
                    print(f"SIZE WINDOW {curr_offset - last_offset}")
                    ret.append(curr_offset - last_offset)
                    last_offset = curr_offset

            old_val = data[0]

            if f_run:
                data = data[512:]
                curr_offset = 512
                f_run = False
            else:
                data = data[1:]
                curr_offset += 1

            if data:
                curr_hash = r.roll_hash(curr_hash, data[0])

        print(sum(ret) / len(ret))
        print(max(ret))
        print(min(ret))


test()
