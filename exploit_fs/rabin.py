class RabinKarp:
    def __init__(self, pattern, prime=101):
        self.pattern = pattern
        self.pattern_hash = self.calculate_hash(pattern)
        self.prime = prime
        self.p_len = len(pattern)

    def calculate_hash(self, string):
        hash_value = 0
        for char in string:
            hash_value = (hash_value * self.prime + ord(char)) % self.prime
        return hash_value

    def rolling_hash(self, old_hash, old_char, new_char):
        old_char_value = ord(old_char)
        new_char_value = ord(new_char)

        old_hash -= old_char_value * (self.prime ** (self.p_len - 1))
        old_hash *= self.prime
        new_hash = (old_hash + new_char_value) % self.prime

        return new_hash

    def search(self, text):
        t_len = len(text)

        if t_len < self.p_len:
            return []

        text_hash = self.calculate_hash(text[:self.p_len])
        indices = []

        for i in range(t_len - self.p_len + 1):
            if text_hash == self.pattern_hash and text[i:i+self.p_len] == self.pattern:
                indices.append(i)

            if i < t_2len - self.p_len:
                text_hash = self.rolling_hash(text_hash, text[i], text[i + self.p_len])

        return indices

# Example usage
text = "ababcababcabcabc"
pattern = "abc"
rk = RabinKarp(pattern)
indices = rk.search(text)
print("Pattern found at indices:", indices)