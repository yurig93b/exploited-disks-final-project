import traceback
from typing import Dict

from pymongo import MongoClient
from scapy.all import IP, ICMP, send, sniff, Ether
import time
from threading import Lock, Thread

from fs.config import IFACE, BLOCK_SIZE_BYTES
from scanner.host_manager import HostManager


class IPScanner(object):
    IPS_PER_SEC = 10

    def __init__(self):
        self._host_to_timestamp: Dict[str, float] = {}
        self._lock = Lock()

        self._host_manager = HostManager()
        self.t = Thread(target=self.worker_loopback)
        self.t.daemon = True
        self.t.start()

    def worker_loopback(self):
        print("listening worker is running")
        def handle_icmp_packet(packet):
            if packet.haslayer(ICMP):
                try:
                    with self._lock:
                        h = packet[IP].src
                        if h in self._host_to_timestamp:
                            prev = self._host_to_timestamp[h]
                            del self._host_to_timestamp[h]
                            now = time.time()
                            ms = (now - prev) * 1000
                            self._host_manager.set_host_as_free_ms(h, ms)
                            print(f"Updated free host {h} with {ms} ms")
                        else:
                            print(f"WARNING - received packet from {h} with no timestamp reference")
                except:
                    traceback.print_exc()

        while True:
            try:
                sniff(filter="icmp", prn=handle_icmp_packet, iface=IFACE,
                      lfilter=lambda pkt: pkt[Ether].src != Ether().src)
            except:
                traceback.print_exc()

    def send_data_to_host(self, h: str, data):
        ip_packet = IP(dst=h)
        icmp_packet = ICMP() / data
        packet = ip_packet / icmp_packet
        send(packet, iface=IFACE)
        print(f"Sent payload to {h} of len {len(data)}")

    def run(self):
        data = b'\x01' * BLOCK_SIZE_BYTES
        count = 0
        for h in self._host_manager.get_pending_hosts():
            self._host_to_timestamp[h['ip']] = time.time()
            self.send_data_to_host(h['ip'], data)
            count += 1
            count = count % 10
            if not count:
                time.sleep(1)

        time.sleep(3)

if __name__ == "__main__":
    IPScanner().run()