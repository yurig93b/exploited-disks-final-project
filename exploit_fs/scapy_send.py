import time
from threading import Thread

from scapy.all import IP, ICMP, send, sniff, Ether

MYMAC = "f8:4d:89:72:ab:54"


def send_icmp_message(destination, message):
    ip_packet = IP(dst=destination)
    icmp_packet = ICMP() / message
    packet = ip_packet / icmp_packet
    send(packet, iface='en0')

def handle_icmp_packet(packet):
    if packet.haslayer(ICMP):
        try:
            print(packet.src)
            icmp_payload = packet[ICMP].load
            print(len(icmp_payload))
            print("Received message:", icmp_payload)
        except AttributeError:
            pass



def worker():
    # Sniff for incoming ICMP packets
    sniff(filter="icmp", prn=handle_icmp_packet, iface='en0', lfilter=lambda pkt: pkt[Ether].src != Ether().src)

def main():
    destination = "103.103.128.1"  # Replace with the destination IP
    message = b'\xFC'*1472


    t = Thread(target=worker, args=())
    t.daemon = True
    t.start()

    time.sleep(1)
    send_icmp_message(destination, message)
    t.join()
    # Sniff for incoming ICMP packets
    # sniff(filter="icmp", prn=handle_icmp_packet)

if __name__ == "__main__":
    main()